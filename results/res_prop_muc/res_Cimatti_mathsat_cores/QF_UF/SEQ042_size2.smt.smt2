(set-option :produce-unsat-cores true)
(set-info :status unknown)
(declare-sort U 0)
(declare-fun c_1 () U)
(declare-fun c7 () U)
(declare-fun c_0 () U)
(declare-fun c5 () U)
(declare-fun c4 () U)
(declare-fun c6 () U)
(declare-fun f1 (U) U)
(declare-fun f2 (U) U)
(declare-fun f3 (U U) U)
(define-fun .def_0 () Bool (! (not (= c_0 c_1)) :named _c0))
(define-fun .def_1 () Bool (! (or (= (f2 (f3 c_0 c_0)) (f2 c_0)) (not (= (f1 c_0) (f2 c_0)))) :named _c1))
(define-fun .def_2 () Bool (! (or (= (f2 (f3 c_0 c_1)) (f2 c_0)) (not (= (f1 c_0) (f2 c_1)))) :named _c2))
(define-fun .def_3 () Bool (! (or (= (f2 (f3 c_1 c_0)) (f2 c_1)) (not (= (f1 c_1) (f2 c_0)))) :named _c3))
(define-fun .def_4 () Bool (! (or (= (f2 (f3 c_1 c_1)) (f2 c_1)) (not (= (f1 c_1) (f2 c_1)))) :named _c4))
(define-fun .def_5 () Bool (! (= (f1 (f2 c_0)) (f2 c_0)) :named _c5))
(define-fun .def_6 () Bool (! (= (f1 (f2 c_1)) (f2 c_1)) :named _c6))
(define-fun .def_7 () Bool (! (= (f3 (f2 c_0) c_0) c_0) :named _c7))
(define-fun .def_8 () Bool (! (= (f3 (f2 c_1) c_1) c_1) :named _c8))
(define-fun .def_9 () Bool (! (= (f3 c6 (f3 c4 c5)) (f3 c7 (f3 c4 c5))) :named _c9))
(define-fun .def_10 () Bool (! (or (= c_0 c_1)
    (not (= (f3 c_0 c5) c_0))
    (not (= (f1 c_0) (f2 c4)))
    (not (= (f1 c_1) (f2 c5)))
    (not (= (f3 c_1 c5) c_0))) :named _c10))
(define-fun .def_11 () Bool (! (or (= c_0 c_1)
    (not (= (f3 c_0 c5) c_1))
    (not (= (f1 c_0) (f2 c4)))
    (not (= (f1 c_1) (f2 c5)))
    (not (= (f3 c_1 c5) c_1))) :named _c11))
(define-fun .def_12 () Bool (! (or (= c_1 c_0)
    (not (= (f3 c_1 c5) c_0))
    (not (= (f1 c_1) (f2 c4)))
    (not (= (f1 c_0) (f2 c5)))
    (not (= (f3 c_0 c5) c_0))) :named _c12))
(define-fun .def_13 () Bool (! (or (= c_1 c_0)
    (not (= (f3 c_1 c5) c_1))
    (not (= (f1 c_1) (f2 c4)))
    (not (= (f1 c_0) (f2 c5)))
    (not (= (f3 c_0 c5) c_1))) :named _c13))
(define-fun .def_14 () Bool (! (= (f2 (f1 c_0)) (f1 c_0)) :named _c14))
(define-fun .def_15 () Bool (! (= (f2 (f1 c_1)) (f1 c_1)) :named _c15))
(define-fun .def_16 () Bool (! (or (not (= (f1 c_0) (f2 c_0))) (= (f1 (f3 c_0 c_0)) (f1 c_0))) :named _c16))
(define-fun .def_17 () Bool (! (or (not (= (f1 c_0) (f2 c_1))) (= (f1 (f3 c_0 c_1)) (f1 c_1))) :named _c17))
(define-fun .def_18 () Bool (! (or (not (= (f1 c_1) (f2 c_0))) (= (f1 (f3 c_1 c_0)) (f1 c_0))) :named _c18))
(define-fun .def_19 () Bool (! (or (not (= (f1 c_1) (f2 c_1))) (= (f1 (f3 c_1 c_1)) (f1 c_1))) :named _c19))
(define-fun .def_20 () Bool (! (or (= c_0 c_1)
    (not (= (f1 c_0) (f2 c4)))
    (not (= (f3 c_1 c4) c_0))
    (not (= (f3 c_0 c4) c_0))
    (not (= (f1 c_1) (f2 c5)))) :named _c20))
(define-fun .def_21 () Bool (! (or (= c_0 c_1)
    (not (= (f1 c_0) (f2 c4)))
    (not (= (f3 c_1 c4) c_1))
    (not (= (f3 c_0 c4) c_1))
    (not (= (f1 c_1) (f2 c5)))) :named _c21))
(define-fun .def_22 () Bool (! (or (= c_1 c_0)
    (not (= (f1 c_1) (f2 c4)))
    (not (= (f3 c_0 c4) c_0))
    (not (= (f3 c_1 c4) c_0))
    (not (= (f1 c_0) (f2 c5)))) :named _c22))
(define-fun .def_23 () Bool (! (or (= c_1 c_0)
    (not (= (f1 c_1) (f2 c4)))
    (not (= (f3 c_0 c4) c_1))
    (not (= (f3 c_1 c4) c_1))
    (not (= (f1 c_0) (f2 c5)))) :named _c23))
(define-fun .def_24 () Bool (! (= (f1 c6) (f2 (f3 c4 c5))) :named _c24))
(define-fun .def_25 () Bool (! (= (f1 c4) (f2 c5)) :named _c25))
(define-fun .def_26 () Bool (! (= (f1 c7) (f2 (f3 c4 c5))) :named _c26))
(define-fun .def_27 () Bool (! (= (f3 c_0 (f1 c_0)) c_0) :named _c27))
(define-fun .def_28 () Bool (! (= (f3 c_1 (f1 c_1)) c_1) :named _c28))
(define-fun .def_29 () Bool (! (or (= (f3 c_0 (f3 c_0 c_0)) (f3 (f3 c_0 c_0) c_0)) (not (= (f1 c_0) (f2 c_0)))) :named _c29))
(define-fun .def_30 () Bool (! (or (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))
    (not (= (f1 c_0) (f2 c_0)))
    (not (= (f1 c_0) (f2 c_1)))) :named _c30))
(define-fun .def_31 () Bool (! (or (= (f3 c_0 (f3 c_1 c_0)) (f3 (f3 c_0 c_1) c_0))
    (not (= (f1 c_0) (f2 c_1)))
    (not (= (f1 c_1) (f2 c_0)))) :named _c31))
(define-fun .def_32 () Bool (! (or (= (f3 c_0 (f3 c_1 c_1)) (f3 (f3 c_0 c_1) c_1))
    (not (= (f1 c_0) (f2 c_1)))
    (not (= (f1 c_1) (f2 c_1)))) :named _c32))
(define-fun .def_33 () Bool (! (or (= (f3 c_1 (f3 c_0 c_0)) (f3 (f3 c_1 c_0) c_0))
    (not (= (f1 c_1) (f2 c_0)))
    (not (= (f1 c_0) (f2 c_0)))) :named _c33))
(define-fun .def_34 () Bool (! (or (= (f3 c_1 (f3 c_0 c_1)) (f3 (f3 c_1 c_0) c_1))
    (not (= (f1 c_1) (f2 c_0)))
    (not (= (f1 c_0) (f2 c_1)))) :named _c34))
(define-fun .def_35 () Bool (! (or (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))
    (not (= (f1 c_1) (f2 c_1)))
    (not (= (f1 c_1) (f2 c_0)))) :named _c35))
(define-fun .def_36 () Bool (! (or (= (f3 c_1 (f3 c_1 c_1)) (f3 (f3 c_1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1)))) :named _c36))
(define-fun .def_37 () Bool (! (not (= c6 c7)) :named _c37))
(define-fun .def_38 () Bool (! (or (= (f3 c_0 c_0) c_0) (= (f3 c_0 c_0) c_1)) :named _c38))
(define-fun .def_39 () Bool (! (or (= (f3 c_0 c_1) c_0) (= (f3 c_0 c_1) c_1)) :named _c39))
(define-fun .def_40 () Bool (! (or (= (f3 c_1 c_0) c_0) (= (f3 c_1 c_0) c_1)) :named _c40))
(define-fun .def_41 () Bool (! (or (= (f3 c_1 c_1) c_0) (= (f3 c_1 c_1) c_1)) :named _c41))
(define-fun .def_42 () Bool (! (or (= (f2 c_0) c_0) (= (f2 c_0) c_1)) :named _c42))
(define-fun .def_43 () Bool (! (or (= (f2 c_1) c_0) (= (f2 c_1) c_1)) :named _c43))
(define-fun .def_44 () Bool (! (or (= (f1 c_0) c_0) (= (f1 c_0) c_1)) :named _c44))
(define-fun .def_45 () Bool (! (or (= (f1 c_1) c_0) (= (f1 c_1) c_1)) :named _c45))
(define-fun .def_46 () Bool (! (or (= c6 c_0) (= c6 c_1)) :named _c46))
(define-fun .def_47 () Bool (! (or (= c4 c_0) (= c4 c_1)) :named _c47))
(define-fun .def_48 () Bool (! (or (= c5 c_0) (= c5 c_1)) :named _c48))
(define-fun .def_49 () Bool (! (or (= c7 c_0) (= c7 c_1)) :named _c49))
(assert _c0)
(assert _c1)
(assert _c2)
(assert _c3)
(assert _c4)
(assert _c5)
(assert _c6)
(assert _c7)
(assert _c8)
(assert _c9)
(assert _c10)
(assert _c11)
(assert _c12)
(assert _c13)
(assert _c14)
(assert _c15)
(assert _c16)
(assert _c17)
(assert _c18)
(assert _c19)
(assert _c20)
(assert _c21)
(assert _c22)
(assert _c23)
(assert _c24)
(assert _c25)
(assert _c26)
(assert _c27)
(assert _c28)
(assert _c29)
(assert _c30)
(assert _c31)
(assert _c32)
(assert _c33)
(assert _c34)
(assert _c35)
(assert _c36)
(assert _c37)
(assert _c38)
(assert _c39)
(assert _c40)
(assert _c41)
(assert _c42)
(assert _c43)
(assert _c44)
(assert _c45)
(assert _c46)
(assert _c47)
(assert _c48)
(assert _c49)
(check-sat)
(get-unsat-core)
